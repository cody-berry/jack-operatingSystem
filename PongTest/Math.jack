// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;
    /** Initializes the library. */
    function void init() {
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = -16384 - 16384;
        return;
    }

    /** Returns the absolute value of x. 
     *  The absolute value of a negative number is -x and the absolute value 
     *  of a positive number is itself.
     */
    function int abs(int x) {
        // always return positive version
        if (x < 0) {
            return -x; // negative x → return -x, or positive version
        } else { // 0 x → return 0, which is either -x or x
            return x;  // positive x → return x, or positive version
        }
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX, i;

        let shiftedX = x;
        let sum = 0;

        // iterate through the binary y
        let i = 0;
        while (i < 16) {
            // if the bit is 1, add shiftedX to the sum
            if (Math.bit(y, i)) {
                let sum = sum + shiftedX;
            }

            // double shiftedX
            // add shiftedX to itself to prevent a recursive basecase-less algorithm
            let shiftedX = shiftedX + shiftedX;

            let i = i + 1;
        }

        // return the result
        return sum;
    }

    /** Returns the binary representation of x.
     *  The first element is the 1's digit, then 2, then 4, 8, 16, 32, etc.
     */
    function boolean bit(int x, int i) {
        return x & twoToThe[i];
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q;
        var int absX, absY, numNegatives;

        let absX = Math.abs(x);
        let absY = Math.abs(y);

        // this is a recursive algorithm.
        // base case: if y is more than x, then the floor of x/y is 0.
        if (absY > absX) {
            return 0;
        }

        let numNegatives = 0;
        if (~(absX = x)) {
            let numNegatives = 1;
        }
        if (~(absY = y)) {
            let numNegatives = numNegatives + 1;
        }
        if (numNegatives = 2) {
            let numNegatives = 0;
        }

        // if we don't know what x/y is, we do know that it's 2x/(2*y)
        let q = absX/(absY+absY);

        // determine whether we add one from dividing by 2
        if ((absX - ((q+q)*absY)) < absY) {
            if (numNegatives) {
                return -q - q;
            } else {
                return q + q;
            }
        } else {
            if (numNegatives) {
                return -q - q - 1;
            } else {
                return q + q + 1;
            }
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int lowerBound, upperBound, average, iterations, averageSquared;
        // Initialize:
        // Lower bound is 0
        let lowerBound = 0;

        // Upper bound is minimum of x and 182
        let upperBound = Math.min(x, 182);

        // average is average of lower bound and upper bound squared
        let average = (lowerBound + upperBound)/2;

        // End of initialization
        // Repeat the following forever:
        while (true) {
            // If the upper bound minus the lower bound is 1 or less, the square 
            // root must be the lower bound because we would've known that it was
            // the upper bound while we were moving the upper bound
            if (upperBound - lowerBound < 2) {
                return lowerBound;
            }

            let averageSquared = averageSquared * averageSquared;

            // If the middle bound squared is less than the target bound, 
            // the target bound cannot be less than what is now the left bound,
            // or the middle bound
            if (averageSquared < x) {
                let lowerBound = average;
            }

            // If the middle bound squared is greater than the target bound, 
            // the target bound cannot be greater than what is now the upper
            // bound, or the middle bound
            if (averageSquared > x) {
                let upperBound = average;
            }

            // If the middle bound squared is equal to the target bound, return 
            // the middle bound, the square root of x
            if (averageSquared = x) {
                return average;
            }

            // Set the average to the average of lowerBound and upperBound
            let average = (lowerBound + upperBound)/2;
        }
        // There's no need to return at the end because we're repeating forever, 
        // but we must to prevent compilation errors.
        return -1;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        // return a if a is greater
        if (a > b) {
            return a;
        } 
        // return b if b is greater or equal. if b = a, it doesn't matter
        // which we return. we return b for this implementation.
        else {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        // return a if a is less
        if (a < b) {
            return a;
        }
        // return b if b is less than or equal. if b = a, it doesn't matter
        // which we return. we return b for this implementation. 
        else {
            return b;
        }
    }
}
