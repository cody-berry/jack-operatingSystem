// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Keyboard.jack

/**
 * A library for handling user input from the keyboard.
 */
class Keyboard {

    /** Initializes the keyboard. */
    function void init() {
        return;
    } 

    /**
     * Returns the character of the currently pressed key on the keyboard;
     * if no key is currently pressed, returns 0.
     *
     * Recognizes all ASCII characters, as well as the following keys:
     * new line = 128 = String.newline()
     * backspace = 129 = String.backspace()
     * left arrow = 130
     * up arrow = 131
     * right arrow = 132
     * down arrow = 133
     * home = 134
     * End = 135
     * page up = 136
     * page down = 137
     * insert = 138
     * delete = 139
     * ESC = 140
     * F1 - F12 = 141 - 152
     */
    function char keyPressed() {
        return Memory.peek(24576);
    }

    /**								
     * Waits until a key is pressed on the keyboard and released,
     * then echoes the key to the screen, and returns the character 
     * of the pressed key.
     */
    function char readChar() {
        var char c;

        do Output.printChar(0);

        // while there is no key pressed, do nothing.
        while (~Keyboard.keyPressed()) {}

        // when a key is pressed, print it out and set c to it.
        let c = Keyboard.keyPressed();
        do Output.backSpace();
        do Output.printChar(c);

        // while the key is still down, do nothing.
        while (Keyboard.keyPressed() = c) {}

        return c;
    }

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its value. Also handles user backspaces.
     */
    function String readLine(String message) {
        var String s;
        var char c;

        // prints the message
        do Output.printString(message);

        // create an empty string
        let s = String.new(10);

        // repeat...
        while (true) {
            // read a character
            let c = Keyboard.readChar();

            // if the character is a new line, display a new line and return the string
            if (c = String.newLine()) {
                return s;
            }

            // if the character is a back space, remove the last character and output 
            // backspace
            else {
                if (c = String.backSpace()) {
                    do s.eraseLastChar();
                }
                // otherwise, append c to str. 
                else {
                    do s.appendChar(c);
                }
            }
        }

        return "3";
    }   

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its integer value (until the first non-digit character in the
     * entered text is detected). Also handles user backspaces. 
     */
    function int readInt(String message) {
        var String s;
        var char c;

        // prints the message
        do Output.printString(message);

        // create an empty string
        let s = String.new(6);

        // repeat...
        while (true) {
            // read a character
            let c = Keyboard.readChar();

            // if the character is a back space, remove the last character and output 
            // backspace
            if (c = String.backSpace()) {
                do s.eraseLastChar();
            }
            else {
                // if the character is not an integer or "-", display a new line and return 
                // the string
                if (~(((c > 47) & (c < 58)) | (c = 45))) {
                    return s.intValue();
                }
                // otherwise, append c to str. 
                else {
                    do s.appendChar(c);
                }
            }
        }

        return 0;
    }
}
