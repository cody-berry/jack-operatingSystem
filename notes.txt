
                                                                              .

03:43 pm Thursday, December 22, 2022
[1543]→	Unit 6.9: Input
RAM[24576] is the keyboard. Each keyboard press's ASCII code will be displayed in RAM[24576].
Mappings:
 , |, ", #, $, %, &, ', (, ), *, +, ,, -, ., / = 32-47
0, 1, ..., 9 = 48-57
:, ;, <, =, >, ?, @ = 58-64
A, B, C, ..., Z = 65-90
[, /, ], ^, _, ` = 91-96
a, b, c, ..., z = 97-122
{, |, }, ~ = 123-126
newline, backspace, left arrow, up arrow, right arrow, down arrow, home, end, page-up, page-down, insert, delete, esc = 128-140
f1, f2, f3, ..., f12 = 141-152
keyPressed():
This is basically Ram[24576]

readChar():
Display the cursor
While keyPressed is 0, we do nothing.
c=code of the curerntely pressed key.
While the key is down, do nothing. After that, we can give them what they pressed.

readLine():
str = empty string
repeat c=readChar(), and if it is enter, we want to display new-line and change the string. If c is backspace, there is a funcction in output which is called 'backspace'.


02:38 pm Thursday, December 22, 2022
[1438]→	Unit 6.8: Handling Textual Output
Graphics: 256 by 512 pixels for drawing lines, circles, pixels, and things like that
Textual: 23 rows of 64 characters. This is because each character is 11 pixels high and 8 pixels wide. 2 emty columns and 1 row at the bottom. 
We have charMaps!
initMap:
charMaps is a new 127 characters. 
create(index, a, b, c, d, e, f, g, h, i, j, k):
map = Array.new(11)
let charMaps[index] = map
map[0], map[1], map[2], map[3], map[4], map[5], map[6], map[7], map[8], map[9], map[10] = a, b, c, d, e, f, g, h, i, j, k
return
What about the cursor?
new line: move cursor
backspace: move cursor backwards
any other printable character: display the character, move cursor one column to right


03:22 pm Wednesday, December 21, 2022
[1522]→	Unit 6.7: Line Drawing

drawLine(x, y, dx, dy):
a=0, b=0, diff=0
while a<dx and b<dy:
	drawPixel(x+a, y+b)
	if diff < 0: a=a+1, diff=diff+dy
	else: b=b+1, diff=diff-dx
03:09 pm Wednesday, December 21, 2022
[1509]→	Unit 6.6: Graphics

drawPixel():
Grab the x and y coordinates. Then grab the x modulo 16th bit of the value to the current color, somehow. 
address = 32*y + x/16
value=Memory.peek[16384 + address]
set the (x % 16)th bit of value to the current color
do Memory.poke(address, value)

drawCircle(x, y, r):
dy=-r.
while dy < r:
	a = x-√(r²-dy²)
	b=y+dy
	drawLine(a, b, 2*a, 0)
	r += 1

02:33 pm Wednesday, December 21, 2022
[1433]→	Unit 6.5: Heap Management
init():
Already implemented: 'ram=0', static array ram
Free should be set to the heap base. Now we can use our whole heap. 
Use a linked list to keep track of available heap segments.

alloc(size):
iterate through the linked list to find a block of size size+2. keep the smallest that is greater than equal to size+2 in mind.
otherwise
block = free
free = free + size
return block

deAlloc():
take the block and add it to the freeList


02:20 pm Wednesday, December 21, 2022
[1420]→	Unit 6.4: Memory Access
peek():
256-2048: Stack
2048-16384: Heap
16384-24577: I/O memory maps
24577-32767: Unused area
Using a static array ram, create an init function that says 'ram=0'.
Return ram[i].

poke():
Set ram[i] to value and return.



05:21 pm Saturday, December 17, 2022
[1721]→	⊼₂ Unit 6.3: Mathematical Operations 
multiply():
In Unit 6.2.

division():
The naive way is to count how many times we can add b to itself to get a, 
with a/b. The correct way is with long division. The one that we're going to 
use in our operating system is the following: Take 100/7. We don't know the 
answer, but we know it's 50*2/7. We know that's 25*2*2/7. We know that's 
about 12*2*2*2/7. We know that's 6*2*2*2*2/7. And you get the picture.

sqrt():
Binary search! Use x*x and see if it is less or greater than the answer.


05:28 pm Monday, December 12, 2022
[1728]→	⊼₂ Unit 6.2: Efficiency Matters
Numerous applications will use the OS. Make sure that these methods are as 
efficient as possible! For example, multiplication.
let x = 419*5003 is the same as let x=Math.multiply(419, 5003);
Math.multiply: Multiply binary!

02:59 pm Monday, December 12, 2022
[1459]→ ⊼₂ Unit 6.1 Operating System

Typical OS services include 
	mathmetical operations
	abstract data types
	input functions
	textual output
	graphics output

System oriented services include 
	file systems
	memory managements
	drivers
	UI management
	multi-tasking
	networking
    security 

The OS classes:
1) Math provides mathematics functions like absolute value and multiply. 
2) Memory contains functions that access the RAM. 
3) Screen contains functions that can draw polygons.
4) Output will write text on the screen.
5) Keyboard interacts with the user.
6) String provides string processing services like Java's.
7) Array provides array processing services, but arrays are very similar to 
   objects.
8) Sys provides some useful algorithms.