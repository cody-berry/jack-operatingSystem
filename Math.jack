// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    /** Initializes the library. */
    function void init() {
        return; // nothing needed
    }

    /** Returns the absolute value of x. 
     *  The absolute value of a negative number is -x and the absolute value 
     *  of a positive number is itself.
     */
    function int abs(int x) {
        // always return positive version
        if (x < 0) {
            return -x; // negative x → return -x, or positive version
        } else { // 0 x → return 0, which is either -x or x
            return x;  // positive x → return x, or positive version
        }
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var Array binaryY;
        var int sum, shiftedX, i;

        do Output.printInt(x);
        do Output.printString("*");
        do Output.printInt(y);
        do Output.println();

        // convert y to binary
        let binaryY = Math.convertToBin(y);

        // make a sum variable (our result)
        let sum = 0;

        // add what we're going to add to sum next iteration
        let shiftedX = x;

        // iterate through the binary y
        let i = 0;
        while (i < 16) {
            // if the bit is 1, add shiftedX to the sum
            if (binaryY[i] = 1) {
                let sum = sum + shiftedX;
            }

            // double shiftedX
            // add shiftedX to itself to prevent a recursive basecase-less algorithm
            let shiftedX = shiftedX + shiftedX;

            let i = i + 1;
        }

        do binaryY.dispose();

        // return the result
        return sum;
    }

    /** Returns the binary representation of x.
     *  The first element is the 1's digit, then 2, then 4, 8, 16, 32, etc.
     */
    function Array convertToBin(int x) {
        var int digitToConsider, i, copyX;
        var Array result;

        // add the digit that we're considering
        let digitToConsider = 16384;

        // add the result, a list of 16 bits
        let result = Array.new(16);

        // create a copy of x
        let copyX = x;

        // add the number of iterations
        // set every element to 0
        let i = 16;
        while (i > 0) {
            let i = i - 1;
            let result[i] = 0;
        }

        // if the number is negative, add 32768.
        if (copyX < 0) {
            let copyX = copyX + 32767 + 1;
            let result[15] = 1;
        }

        // while the number of iterations is less than 16...
        while (i < 15) {
            // if x is greater than the digit we're considering, subtract the digit
            // we're considering from the number, and set the respective element
            // of the result to 1.
            do Output.printInt(copyX);
            do Output.println();
            if ((copyX > digitToConsider) | (copyX = digitToConsider)) {
                let copyX = copyX - digitToConsider;
                let result[14-i] = 1;
            }

            // halve the digit we're considering.
            let digitToConsider = digitToConsider/2;
            let i = i + 1;
        }

        // print the result.
        let i = 0;
        while (i < 16) {
            do Output.printInt(result[i]);
            let i = i + 1;
        }

        // return the result
        return result;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        // this is a recursive algorithm.
        // base case: if y is more than x, then the floor of x/y is 0.

        // if we don't know what x/y is, we do know that it's 2x/(2*y)
        
        // determine whether we add one from dividing by 2

        return 0; // haven't implemented
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int lowerBound, upperBound, middleBound, iterations;
        // Initialize:
        // Lower bound is 0
        let lowerBound = 0;

        // Upper bound is minimum of x and 382
        let upperBound = Math.min(x, 382);

        // Middle bound is average of lower bound and upper bound
        let middleBound = (lowerBound + upperBound)/2;

        // End of initialization
        // Repeat the following forever:
        while (true) {
            // If the middle bound squared is less than the target bound, 
            // the target bound cannot be less than what is now the left bound,
            // or the middle bound
            if (middleBound*middleBound < x) {
                let lowerBound = middleBound;
            }

            // If the middle bound squared is greater than the target bound, 
            // the target bound cannot be greater than what is now the upper
            // bound, or the middle bound
            if (middleBound*middleBound > x) {
                let upperBound = middleBound;
            }

            // If the middle bound squared is equal to the target bound, return 
            // the middle bound, the square root of x
            if (middleBound*middleBound = x) {
                return middleBound;
            }

            // If the upper bound minus the lower bound is 1 or less, the square 
            // root must be the lower bound because we would've known that it was
            // the upper bound while we were moving the upper bound
            if (upperBound - lowerBound < 2) {
                return lowerBound;
            }
            // Set the middleBound to the average of lowerBound and upperBound
            let middleBound = (lowerBound + upperBound)/2;
        }
        // There's no need to return at the end because we're repeating forever, 
        // but we must to prevent compilation errors.
        return -1;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        // return a if a is greater
        if (a > b) {
            return a;
        } 
        // return b if b is greater or equal. if b = a, it doesn't matter
        // which we return. we return b for this implementation.
        else {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        // return a if a is less
        if (a < b) {
            return a;
        }
        // return b if b is less than or equal. if b = a, it doesn't matter
        // which we return. we return b for this implementation. 
        else {
            return b;
        }
    }
}
