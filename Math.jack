// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    /** Initializes the library. */
    function void init() {
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        // the absolute value of a negative number is the positive version
        if (x < 0) {
            return -x; 
        } else { // the abs value of a positive number is the number itself
            return x;
        }
    }

    /**
     *  Converts X to binary. 
     *  A list of booleans are returned. Each boolean is true if their 
     *  respective bit is on, and false if not. The length of the array is 15
     *  because the number cannot be negative. 
     */
    function int convertToBinary(int x) {
        var Array result;
        var int i, shift, xCopy;
        let result = Array.new(15);
        let i = 0;
        let shift = 1;
        let xCopy = x;


        // while shift is not 0, we try to subtract shift from x.
        // if we can, we set the respective bit to 1 and subtract it from 
        // xCopy.
        while (xCopy) {
            if (xCopy > shift) {
                let result[i] = 1;
                let xCopy = xCopy - shift;
            } else {
                let result[i] = 0;
            }

            shift = shift*2;
            let i = i + 1;
        }

        return result
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {

    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) 
        var int q;
        if (y > x) {
            return 0;
        }
        let q = divide(x, 2*y);
        if ((x-(2*q*y)) < y) {
            return 2*q;
        } else {
            return (2*q) + 1;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int leftBound, rightBound, middleBound;
        let leftBound = 0;
        let rightBound = max(x, 362);
        let middleBound = (leftBound + rightBound)/2;

        while (true) {
            if (middleBound*middleBound < x) {
                leftBound = middleBound;
                middleBound = middleBound + (leftBound + rightBound)/2;
            } 
            if (middleBound*middleBound > x) {
                rightBound = middleBound;
                middleBound = middleBound - (leftBound + rightBound)/2;
            } 
            if (middleBound*middleBound = x) {
                return middleBound;
            } 
            if (rightBound - leftBound < 2) {
                return leftBound;
            } 
        }
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (b > a) {
            return b;
        } else {
            return a;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (b > a) {
            return a;
        } else {
            return b;
        }
    }
}
