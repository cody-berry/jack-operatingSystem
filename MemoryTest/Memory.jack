// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static int free;
    static Array objectList, ram;
    static int objects;

    /** Initializes the class. */
    function void init() {
        let free = 2048;
        let objectList = Array.new(43008);
        let objects = 0;
        let ram = 0;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int i, block;
        let i = 0;
        while (i < objectList) {
            if ((objectList[(i*3)+2] > size + 1) & objectList[i*3+1]) {
                let objectList[(i*3)+2] = objectList[(i*3)+2] - size - 2;
                return objectList[i*3] + objectList[(i*3)+2];
            }
            let i = i + 1;
        }
        let objects = objects + 1;
        let block = free;
        let free = free + size;
        let objectList[i*3] = block;
        let objectList[i*3+1] = false;
        let objectList[i*3+2] = size;
        return block;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        return;
    }    
}
